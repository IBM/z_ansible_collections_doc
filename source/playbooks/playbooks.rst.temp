.. ...........................................................................
.. Â© Copyright IBM Corporation 2020                                          .
.. ...........................................................................

=========
Playbooks
=========

The sample playbooks that are **included** in the **IBM z/OS collections**
demonstrate how to use the collection content.

Documentation
=============

An `Ansible playbook`_ consists of organized instructions that define work for
a managed node (host) to be managed with Ansible.

A `playbooks directory`_ that contains a sample playbook is included in the
**IBM z/OS core collection**. The sample playbook can be run with the
``ansible-playbook`` command with some modification to the **inventory**,
**ansible.cfg** and **group_vars**.

You can find the playbook content that is included with the collection in the
same location where the collection is installed. For more information, refer to
the `installation documentation`_. In the following examples, this document will
refer to the installation path as ``~/.ansible/collections/ibm/ibm_zos_core``.

.. _Ansible playbook:
   https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html#playbooks-intro
.. _playbooks directory:
   https://github.com/ansible-collections/ibm_zos_core/tree/main/playbooks
.. _installation documentation:
   installation.html

ibm_zos_core
------------

After the collection is installed, you can access the collection content for a
playbook by referencing the namespace ``ibm`` and the collection's fully
qualified name ``ibm_zos_core``. For example:

.. code-block:: yaml

    - hosts: all

    tasks:
    - name: Query submitted job 'HELLO'
        ibm.ibm_zos_core.zos_job_query:
        job_name: HELLO


In Ansible 2.9, the ``collections`` keyword was added to reduce the need
to refer to the collection repeatedly. For example, you can use the
``collections`` keyword in your playbook:

.. code-block:: yaml

    - hosts: all
      collections:
      - ibm.ibm_zos_core

      tasks:
      - name: Query submitted job 'HELLO'
        zos_job_query:
            job_name: HELLO

ansible-doc
-----------

Modules included in this collection provide additional documentation that is
similar to a UNIX, or UNIX-like operating system man page (manual page). This
documentation can be accessed from the command line by using the
``ansible-doc`` command.

Here's how to use the ``ansible-doc`` command after you install the
**IBM z/OS core collection**: ``ansible-doc ibm.ibm_zos_core.zos_data_set``

.. code-block:: sh

    > ZOS_DATA_SET    (/Users/user/.ansible/collections/ansible_collections/ibm/ibm_zos_core/plugins/modules/zos_data_set.py)

            Create, delete and set attributes of data sets. When forcing data set replacement, contents will not be
            preserved.

    * This module is maintained by The Ansible Community
    OPTIONS (= is mandatory):

    - batch
            Batch can be used to perform operations on multiple data sets in a single module call.
            Each item in the list expects the same options as zos_data_set.
            [Default: (null)]
            type: list
            version_added: 2.9

    - data_class
            The data class name (required for SMS-managed data sets)
            [Default: (null)]
            type: str
            version_added: 2.9

For more information on using the ``ansible-doc`` command, refer
to `Ansible guide`_.

.. _Ansible guide:
   https://docs.ansible.com/ansible/latest/cli/ansible-doc.html#ansible-doc


Configuration and Setup
=======================

Each release of a collection provides sample default configurations, and options
that allow you to customize Ansible to your environment. Select an offering to
learn more about the configuration and setup options available to set up your
automation project.

Offerings
---------

.. toctree::
   :maxdepth: 1

   z/OS core </../ibm_zos_core/docs/source/playbook_config_setup>
   z/OS IMS </../ibm_zos_ims/docs/source/playbook_config_setup>

Inventory
=========

Ansible works with multiple managed nodes (hosts) that must be listed in a list
of group of lists, known as the Inventory. After the inventory is defined, you
can use the patterns to select the hosts or groups that you want Ansible to run
against. Review the inventory section in the corresponding collections to
learn more about how inventory is defined and the other caveats.


Offerings
---------

.. toctree::
   :maxdepth: 1

   z/OS core </../ibm_zos_core/docs/source/playbook_inventory>
   z/OS IMS </../ibm_zos_ims/docs/source/playbook_inventory>

Group_vars
==========

Group variables (group_vars) enable you to manage the variables and organize the
the variable values easily. Group variables can be stored either in the
inventory file or separate host and group variable files. The sample playbook
includes a sample variables file titled **all.yml**.

Each offering in the IBM z/OS collection has a specific set of group_vars and
the documentation provides a list of the variable values. Learn more about the
specific Group_vars from the corresponding offering:

Offerings
---------

.. toctree::
   :maxdepth: 1

   z/OS core </../ibm_zos_core/docs/source/playbook_group_vars>
   z/OS IMS </../ibm_zos_ims/docs/source/playbook_group_vars>


Run a playbook
==============

Before you run a playbook, review the playbook samples included in the playbook
directory of a collection to determine the requirements with respect to space,
location, authority, and the artifacts that will be created and/or cleaned up.
Each offering may include specific caveats and instructions to run a playbook.
Follow the instructions in the Playbooks section of the offerings before you
proceed.


Offerings
---------

.. toctree::
   :maxdepth: 1

   z/OS core </../ibm_zos_core/docs/source/playbook_run>
   z/OS IMS </../ibm_zos_ims/docs/source/playbook_run>
